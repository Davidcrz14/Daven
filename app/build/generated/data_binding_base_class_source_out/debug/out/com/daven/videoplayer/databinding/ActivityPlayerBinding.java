// Generated by view binder compiler. Do not edit!
package com.daven.videoplayer.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ProgressBar;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.media3.ui.PlayerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.daven.videoplayer.R;
import com.google.android.material.chip.Chip;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityPlayerBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final ImageView aspectButton;

  @NonNull
  public final ImageView backButton;

  @NonNull
  public final ProgressBar loadingProgress;

  @NonNull
  public final ImageView lockButton;

  @NonNull
  public final ImageView loopButton;

  @NonNull
  public final LinearLayout playerBottomActions;

  @NonNull
  public final PlayerView playerView;

  @NonNull
  public final ImageView rotateButton;

  @NonNull
  public final Chip speedChip;

  private ActivityPlayerBinding(@NonNull ConstraintLayout rootView, @NonNull ImageView aspectButton,
      @NonNull ImageView backButton, @NonNull ProgressBar loadingProgress,
      @NonNull ImageView lockButton, @NonNull ImageView loopButton,
      @NonNull LinearLayout playerBottomActions, @NonNull PlayerView playerView,
      @NonNull ImageView rotateButton, @NonNull Chip speedChip) {
    this.rootView = rootView;
    this.aspectButton = aspectButton;
    this.backButton = backButton;
    this.loadingProgress = loadingProgress;
    this.lockButton = lockButton;
    this.loopButton = loopButton;
    this.playerBottomActions = playerBottomActions;
    this.playerView = playerView;
    this.rotateButton = rotateButton;
    this.speedChip = speedChip;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityPlayerBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityPlayerBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_player, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityPlayerBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.aspectButton;
      ImageView aspectButton = ViewBindings.findChildViewById(rootView, id);
      if (aspectButton == null) {
        break missingId;
      }

      id = R.id.backButton;
      ImageView backButton = ViewBindings.findChildViewById(rootView, id);
      if (backButton == null) {
        break missingId;
      }

      id = R.id.loadingProgress;
      ProgressBar loadingProgress = ViewBindings.findChildViewById(rootView, id);
      if (loadingProgress == null) {
        break missingId;
      }

      id = R.id.lockButton;
      ImageView lockButton = ViewBindings.findChildViewById(rootView, id);
      if (lockButton == null) {
        break missingId;
      }

      id = R.id.loopButton;
      ImageView loopButton = ViewBindings.findChildViewById(rootView, id);
      if (loopButton == null) {
        break missingId;
      }

      id = R.id.playerBottomActions;
      LinearLayout playerBottomActions = ViewBindings.findChildViewById(rootView, id);
      if (playerBottomActions == null) {
        break missingId;
      }

      id = R.id.playerView;
      PlayerView playerView = ViewBindings.findChildViewById(rootView, id);
      if (playerView == null) {
        break missingId;
      }

      id = R.id.rotateButton;
      ImageView rotateButton = ViewBindings.findChildViewById(rootView, id);
      if (rotateButton == null) {
        break missingId;
      }

      id = R.id.speedChip;
      Chip speedChip = ViewBindings.findChildViewById(rootView, id);
      if (speedChip == null) {
        break missingId;
      }

      return new ActivityPlayerBinding((ConstraintLayout) rootView, aspectButton, backButton,
          loadingProgress, lockButton, loopButton, playerBottomActions, playerView, rotateButton,
          speedChip);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
